Index.PACKAGES = {"scilube.probability" : [{"name" : "scilube.probability.KDE", "shortDescription" : "Kernel Density Estimator for one-dimensional data.", "object" : "scilube\/probability\/KDE$.html", "members_object" : [{"label" : "dct1d", "tail" : "(data: Array[Double]): Array[Double]", "member" : "scilube.probability.KDE.dct1d", "link" : "scilube\/probability\/KDE$.html#dct1d(data:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "idct1d", "tail" : "(data: Array[Double]): Array[Double]", "member" : "scilube.probability.KDE.idct1d", "link" : "scilube\/probability\/KDE$.html#idct1d(data:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "fixedPoint", "tail" : "(t: Double, N: Double, I: Array[Double], a2: Array[Double]): Double", "member" : "scilube.probability.KDE.fixedPoint", "link" : "scilube\/probability\/KDE$.html#fixedPoint(t:Double,N:Double,I:Array[Double],a2:Array[Double]):Double", "kind" : "def"}, {"label" : "apply", "tail" : "(data: Array[Double], n: Int, min: Double, max: Double): KDEResult", "member" : "scilube.probability.KDE.apply", "link" : "scilube\/probability\/KDE$.html#apply(data:Array[Double],n:Int,min:Double,max:Double):scilube.probability.KDEResult", "kind" : "def"}, {"label" : "apply", "tail" : "(data: Array[Double], n: Int): KDEResult", "member" : "scilube.probability.KDE.apply", "link" : "scilube\/probability\/KDE$.html#apply(data:Array[Double],n:Int):scilube.probability.KDEResult", "kind" : "def"}, {"label" : "apply", "tail" : "(data: Array[Double]): KDEResult", "member" : "scilube.probability.KDE.apply", "link" : "scilube\/probability\/KDE$.html#apply(data:Array[Double]):scilube.probability.KDEResult", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/probability\/KDE$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/probability\/KDE$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/probability\/KDE$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/probability\/KDE$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/probability\/KDE$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/probability\/KDE$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/probability\/KDE$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/probability\/KDE$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/probability\/KDE$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/probability\/KDE$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/probability\/KDE$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/probability\/KDE$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/probability\/KDE$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/probability\/KDE$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/probability\/KDE$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/probability\/KDE$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/probability\/KDE$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/probability\/KDE$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/probability\/KDE$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "scilube.probability.KDEResult", "shortDescription" : "Bean class that holds the output of KDE", "members_class" : [{"member" : "scilube.probability.KDEResult#<init>", "error" : "unsupported entity"}, {"label" : "cdf", "tail" : ": Array[Double]", "member" : "scilube.probability.KDEResult.cdf", "link" : "scilube\/probability\/KDEResult.html#cdf:Array[Double]", "kind" : "val"}, {"label" : "pdf", "tail" : ": Array[Double]", "member" : "scilube.probability.KDEResult.pdf", "link" : "scilube\/probability\/KDEResult.html#pdf:Array[Double]", "kind" : "val"}, {"label" : "x", "tail" : ": Array[Double]", "member" : "scilube.probability.KDEResult.x", "link" : "scilube\/probability\/KDEResult.html#x:Array[Double]", "kind" : "val"}, {"label" : "bandwidth", "tail" : ": Double", "member" : "scilube.probability.KDEResult.bandwidth", "link" : "scilube\/probability\/KDEResult.html#bandwidth:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/probability\/KDEResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/probability\/KDEResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/probability\/KDEResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/probability\/KDEResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/probability\/KDEResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/probability\/KDEResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/probability\/KDEResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/probability\/KDEResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/probability\/KDEResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/probability\/KDEResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/probability\/KDEResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/probability\/KDEResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/probability\/KDEResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/probability\/KDEResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/probability\/KDEResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/probability\/KDEResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/probability\/KDEResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/probability\/KDEResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/probability\/KDEResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scilube\/probability\/KDEResult.html", "kind" : "class"}], "scilube.spirelib" : [{"name" : "scilube.spirelib.ComplexLib", "shortDescription" : "", "object" : "scilube\/spirelib\/ComplexLib$.html", "members_object" : [{"label" : "ifft", "tail" : "(data: Array[Complex[Double]], scale: Boolean): Array[Complex[Double]]", "member" : "scilube.spirelib.ComplexLib.ifft", "link" : "scilube\/spirelib\/ComplexLib$.html#ifft(data:Array[spire.math.Complex[Double]],scale:Boolean):Array[spire.math.Complex[Double]]", "kind" : "def"}, {"label" : "fft", "tail" : "(data: Array[Complex[Double]]): Array[Complex[Double]]", "member" : "scilube.spirelib.ComplexLib.fft", "link" : "scilube\/spirelib\/ComplexLib$.html#fft(data:Array[spire.math.Complex[Double]]):Array[spire.math.Complex[Double]]", "kind" : "def"}, {"label" : "tan", "tail" : "(c: Complex[Double]): Complex[Double]", "member" : "scilube.spirelib.ComplexLib.tan", "link" : "scilube\/spirelib\/ComplexLib$.html#tan(c:spire.math.Complex[Double]):spire.math.Complex[Double]", "kind" : "def"}, {"label" : "cosh", "tail" : "(c: Complex[Double]): Complex[Double]", "member" : "scilube.spirelib.ComplexLib.cosh", "link" : "scilube\/spirelib\/ComplexLib$.html#cosh(c:spire.math.Complex[Double]):spire.math.Complex[Double]", "kind" : "def"}, {"label" : "sinh", "tail" : "(c: Complex[Double]): Complex[Double]", "member" : "scilube.spirelib.ComplexLib.sinh", "link" : "scilube\/spirelib\/ComplexLib$.html#sinh(c:spire.math.Complex[Double]):spire.math.Complex[Double]", "kind" : "def"}, {"label" : "cos", "tail" : "(c: Complex[Double]): Complex[Double]", "member" : "scilube.spirelib.ComplexLib.cos", "link" : "scilube\/spirelib\/ComplexLib$.html#cos(c:spire.math.Complex[Double]):spire.math.Complex[Double]", "kind" : "def"}, {"label" : "sin", "tail" : "(c: Complex[Double]): Complex[Double]", "member" : "scilube.spirelib.ComplexLib.sin", "link" : "scilube\/spirelib\/ComplexLib$.html#sin(c:spire.math.Complex[Double]):spire.math.Complex[Double]", "kind" : "def"}, {"label" : "sqrt", "tail" : "(c: Complex[Double]): Complex[Double]", "member" : "scilube.spirelib.ComplexLib.sqrt", "link" : "scilube\/spirelib\/ComplexLib$.html#sqrt(c:spire.math.Complex[Double]):spire.math.Complex[Double]", "kind" : "def"}, {"label" : "log", "tail" : "(c: Complex[Double]): Complex[Double]", "member" : "scilube.spirelib.ComplexLib.log", "link" : "scilube\/spirelib\/ComplexLib$.html#log(c:spire.math.Complex[Double]):spire.math.Complex[Double]", "kind" : "def"}, {"label" : "exp", "tail" : "(c: Complex[Double]): Complex[Double]", "member" : "scilube.spirelib.ComplexLib.exp", "link" : "scilube\/spirelib\/ComplexLib$.html#exp(c:spire.math.Complex[Double]):spire.math.Complex[Double]", "kind" : "def"}, {"label" : "mod", "tail" : "(c: Complex[Double]): Double", "member" : "scilube.spirelib.ComplexLib.mod", "link" : "scilube\/spirelib\/ComplexLib$.html#mod(c:spire.math.Complex[Double]):Double", "kind" : "def"}, {"label" : "doubleArrayToComplexArray", "tail" : "(d: Array[Double]): Array[Complex[Double]]", "member" : "scilube.spirelib.ComplexLib.doubleArrayToComplexArray", "link" : "scilube\/spirelib\/ComplexLib$.html#doubleArrayToComplexArray(d:Array[Double]):Array[spire.math.Complex[Double]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/spirelib\/ComplexLib$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/spirelib\/ComplexLib$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/spirelib\/ComplexLib$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/spirelib\/ComplexLib$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/spirelib\/ComplexLib$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/spirelib\/ComplexLib$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/spirelib\/ComplexLib$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/spirelib\/ComplexLib$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/spirelib\/ComplexLib$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/spirelib\/ComplexLib$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/spirelib\/ComplexLib$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/spirelib\/ComplexLib$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/spirelib\/ComplexLib$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/spirelib\/ComplexLib$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/spirelib\/ComplexLib$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/spirelib\/ComplexLib$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/spirelib\/ComplexLib$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/spirelib\/ComplexLib$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/spirelib\/ComplexLib$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "scilube.time" : [{"name" : "scilube.time.DateInterval", "trait" : "scilube\/time\/DateInterval.html", "kind" : "trait", "members_trait" : [{"label" : "contains", "tail" : "(date: A, toleranceMillisec: Long): Boolean", "member" : "scilube.time.DateInterval.contains", "link" : "scilube\/time\/DateInterval.html#contains[A<:java.util.Date](date:A,toleranceMillisec:Long):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/time\/DateInterval.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/time\/DateInterval.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/time\/DateInterval.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/time\/DateInterval.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/time\/DateInterval.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/time\/DateInterval.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/time\/DateInterval.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/DateInterval.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/DateInterval.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/DateInterval.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/time\/DateInterval.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/time\/DateInterval.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/time\/DateInterval.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/time\/DateInterval.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/time\/DateInterval.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/time\/DateInterval.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/time\/DateInterval.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/time\/DateInterval.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/time\/DateInterval.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "duration", "tail" : "(): Long", "member" : "scilube.time.MomentInterval.duration", "link" : "scilube\/time\/DateInterval.html#duration:Long", "kind" : "abstract def"}, {"label" : "end", "tail" : "(): Date", "member" : "scilube.time.MomentInterval.end", "link" : "scilube\/time\/DateInterval.html#end:A", "kind" : "abstract def"}, {"label" : "start", "tail" : "(): Date", "member" : "scilube.time.MomentInterval.start", "link" : "scilube\/time\/DateInterval.html#start:A", "kind" : "abstract def"}, {"label" : "contains", "tail" : "(instant: B): Boolean", "member" : "scilube.time.MomentInterval.contains", "link" : "scilube\/time\/DateInterval.html#contains[B<:A](instant:B):Boolean", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "scilube.time.Interval", "shortDescription" : "A interval of time", "members_class" : [{"label" : "duration", "tail" : ": Long", "member" : "scilube.time.Interval.duration", "link" : "scilube\/time\/Interval.html#duration:Long", "kind" : "val"}, {"label" : "contains", "tail" : "(date: B): Boolean", "member" : "scilube.time.Interval.contains", "link" : "scilube\/time\/Interval.html#contains[B<:java.util.Date](date:B):Boolean", "kind" : "def"}, {"member" : "scilube.time.Interval#<init>", "error" : "unsupported entity"}, {"label" : "end", "tail" : ": Date", "member" : "scilube.time.Interval.end", "link" : "scilube\/time\/Interval.html#end:java.util.Date", "kind" : "val"}, {"label" : "start", "tail" : ": Date", "member" : "scilube.time.Interval.start", "link" : "scilube\/time\/Interval.html#start:java.util.Date", "kind" : "val"}, {"label" : "contains", "tail" : "(date: A, toleranceMillisec: Long): Boolean", "member" : "scilube.time.DateInterval.contains", "link" : "scilube\/time\/Interval.html#contains[A<:java.util.Date](date:A,toleranceMillisec:Long):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/time\/Interval.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/time\/Interval.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/time\/Interval.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/time\/Interval.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/time\/Interval.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/time\/Interval.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/time\/Interval.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/Interval.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/Interval.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/Interval.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/time\/Interval.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/time\/Interval.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/time\/Interval.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/time\/Interval.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/time\/Interval.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/time\/Interval.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/time\/Interval.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/time\/Interval.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/time\/Interval.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scilube\/time\/Interval.html", "kind" : "class"}, {"name" : "scilube.time.Moment", "shortDescription" : "A Moment representation of a Moment interval", "members_class" : [{"label" : "duration", "tail" : ": Long", "member" : "scilube.time.Moment.duration", "link" : "scilube\/time\/Moment.html#duration:Long", "kind" : "val"}, {"label" : "contains", "tail" : "(instant: B): Boolean", "member" : "scilube.time.Moment.contains", "link" : "scilube\/time\/Moment.html#contains[B<:java.util.Date](instant:B):Boolean", "kind" : "def"}, {"label" : "start", "tail" : "(): Date", "member" : "scilube.time.Moment.start", "link" : "scilube\/time\/Moment.html#start:java.util.Date", "kind" : "def"}, {"label" : "end", "tail" : "(): Date", "member" : "scilube.time.Moment.end", "link" : "scilube\/time\/Moment.html#end:java.util.Date", "kind" : "def"}, {"member" : "scilube.time.Moment#<init>", "error" : "unsupported entity"}, {"label" : "date", "tail" : ": Date", "member" : "scilube.time.Moment.date", "link" : "scilube\/time\/Moment.html#date:java.util.Date", "kind" : "val"}, {"label" : "contains", "tail" : "(date: A, toleranceMillisec: Long): Boolean", "member" : "scilube.time.DateInterval.contains", "link" : "scilube\/time\/Moment.html#contains[A<:java.util.Date](date:A,toleranceMillisec:Long):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/time\/Moment.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/time\/Moment.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/time\/Moment.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/time\/Moment.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/time\/Moment.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/time\/Moment.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/time\/Moment.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/Moment.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/Moment.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/Moment.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/time\/Moment.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/time\/Moment.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/time\/Moment.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/time\/Moment.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/time\/Moment.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/time\/Moment.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/time\/Moment.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/time\/Moment.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/time\/Moment.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scilube\/time\/Moment.html", "kind" : "class"}, {"name" : "scilube.time.MomentInterval", "object" : "scilube\/time\/MomentInterval$.html", "members_object" : [{"label" : "apply", "tail" : "(d0: Date, d1: Date): DateInterval", "member" : "scilube.time.MomentInterval.apply", "link" : "scilube\/time\/MomentInterval$.html#apply(d0:java.util.Date,d1:java.util.Date):scilube.time.DateInterval", "kind" : "def"}, {"label" : "apply", "tail" : "(d0: Date): Moment", "member" : "scilube.time.MomentInterval.apply", "link" : "scilube\/time\/MomentInterval$.html#apply(d0:java.util.Date):scilube.time.Moment", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/time\/MomentInterval$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/time\/MomentInterval$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/time\/MomentInterval$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/time\/MomentInterval$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/time\/MomentInterval$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/time\/MomentInterval$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/time\/MomentInterval$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/MomentInterval$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/MomentInterval$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/MomentInterval$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/time\/MomentInterval$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/time\/MomentInterval$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/time\/MomentInterval$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/time\/MomentInterval$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/time\/MomentInterval$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/time\/MomentInterval$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/time\/MomentInterval$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/time\/MomentInterval$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/time\/MomentInterval$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "scilube\/time\/MomentInterval.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/time\/MomentInterval.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/time\/MomentInterval.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/time\/MomentInterval.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/time\/MomentInterval.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/time\/MomentInterval.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/time\/MomentInterval.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/time\/MomentInterval.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/MomentInterval.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/MomentInterval.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/time\/MomentInterval.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/time\/MomentInterval.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/time\/MomentInterval.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/time\/MomentInterval.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/time\/MomentInterval.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/time\/MomentInterval.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/time\/MomentInterval.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/time\/MomentInterval.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/time\/MomentInterval.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/time\/MomentInterval.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "duration", "tail" : "(): Long", "member" : "scilube.time.MomentInterval.duration", "link" : "scilube\/time\/MomentInterval.html#duration:Long", "kind" : "abstract def"}, {"label" : "end", "tail" : "(): A", "member" : "scilube.time.MomentInterval.end", "link" : "scilube\/time\/MomentInterval.html#end:A", "kind" : "abstract def"}, {"label" : "start", "tail" : "(): A", "member" : "scilube.time.MomentInterval.start", "link" : "scilube\/time\/MomentInterval.html#start:A", "kind" : "abstract def"}, {"label" : "contains", "tail" : "(instant: B, toleranceMillisec: Long): Boolean", "member" : "scilube.time.MomentInterval.contains", "link" : "scilube\/time\/MomentInterval.html#contains[B<:A](instant:B,toleranceMillisec:Long):Boolean", "kind" : "abstract def"}, {"label" : "contains", "tail" : "(instant: B): Boolean", "member" : "scilube.time.MomentInterval.contains", "link" : "scilube\/time\/MomentInterval.html#contains[B<:A](instant:B):Boolean", "kind" : "abstract def"}], "shortDescription" : "Trait that represents a Moment or Interval in time"}], "scilube.collections" : [{"name" : "scilube.collections.Seqs", "shortDescription" : "List utilites.", "object" : "scilube\/collections\/Seqs$.html", "members_object" : [{"label" : "rotate", "tail" : "(p: Seq[A], u: Int): Seq[A]", "member" : "scilube.collections.Seqs.rotate", "link" : "scilube\/collections\/Seqs$.html#rotate[A](p:Seq[A],u:Int):Seq[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/collections\/Seqs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/collections\/Seqs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/collections\/Seqs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/collections\/Seqs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/collections\/Seqs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/collections\/Seqs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/collections\/Seqs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/collections\/Seqs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/collections\/Seqs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/collections\/Seqs$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/collections\/Seqs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/collections\/Seqs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/collections\/Seqs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/collections\/Seqs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/collections\/Seqs$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/collections\/Seqs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/collections\/Seqs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/collections\/Seqs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/collections\/Seqs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "scilube" : [{"name" : "scilube.Mathematics", "trait" : "scilube\/Mathematics.html", "kind" : "trait", "members_trait" : [{"label" : "unique", "tail" : "(a: Array[Double], occurrence: String): (Array[Double], Array[Int], Array[Int])", "member" : "scilube.Mathematics.unique", "link" : "scilube\/Mathematics.html#unique(a:Array[Double],occurrence:String):(Array[Double],Array[Int],Array[Int])", "kind" : "def"}, {"label" : "sum", "tail" : "(x: Array[Double]): Double", "member" : "scilube.Mathematics.sum", "link" : "scilube\/Mathematics.html#sum(x:Array[Double]):Double", "kind" : "def"}, {"label" : "subtract", "tail" : "(a: Array[Double], b: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.subtract", "link" : "scilube\/Mathematics.html#subtract(a:Array[Double],b:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "sign", "tail" : "(x: Double): Int", "member" : "scilube.Mathematics.sign", "link" : "scilube\/Mathematics.html#sign(x:Double):Int", "kind" : "def"}, {"label" : "rem", "tail" : "(x: Double, y: Double): Double", "member" : "scilube.Mathematics.rem", "link" : "scilube\/Mathematics.html#rem(x:Double,y:Double):Double", "kind" : "def"}, {"label" : "prod", "tail" : "(data: Array[Double]): Double", "member" : "scilube.Mathematics.prod", "link" : "scilube\/Mathematics.html#prod(data:Array[Double]):Double", "kind" : "def"}, {"label" : "norm", "tail" : "(x: Array[Double]): Double", "member" : "scilube.Mathematics.norm", "link" : "scilube\/Mathematics.html#norm(x:Array[Double]):Double", "kind" : "def"}, {"label" : "near", "tail" : "(data: Array[Double], key: Double, inclusive: Boolean): Int", "member" : "scilube.Mathematics.near", "link" : "scilube\/Mathematics.html#near(data:Array[Double],key:Double,inclusive:Boolean):Int", "kind" : "def"}, {"label" : "multiply", "tail" : "(a: Array[Double], b: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.multiply", "link" : "scilube\/Mathematics.html#multiply(a:Array[Double],b:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "mod", "tail" : "(a: Double, b: Double): Double", "member" : "scilube.Mathematics.mod", "link" : "scilube\/Mathematics.html#mod(a:Double,b:Double):Double", "kind" : "def"}, {"label" : "logspace", "tail" : "(d1: Double, d2: Double, n: Int): Array[Double]", "member" : "scilube.Mathematics.logspace", "link" : "scilube\/Mathematics.html#logspace(d1:Double,d2:Double,n:Int):Array[Double]", "kind" : "def"}, {"label" : "linspace", "tail" : "(d1: Double, d2: Double, n: Int): Array[Double]", "member" : "scilube.Mathematics.linspace", "link" : "scilube\/Mathematics.html#linspace(d1:Double,d2:Double,n:Int):Array[Double]", "kind" : "def"}, {"label" : "isprime", "tail" : "(n: A)(arg0: Numeric[A]): Boolean", "member" : "scilube.Mathematics.isprime", "link" : "scilube\/Mathematics.html#isprime[A](n:A)(implicitevidence$1:Numeric[A]):Boolean", "kind" : "def"}, {"label" : "extrap1", "tail" : "(x: Array[Double], y: Array[Double], xi: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.extrap1", "link" : "scilube\/Mathematics.html#extrap1(x:Array[Double],y:Array[Double],xi:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "interp1", "tail" : "(x: Array[Double], y: Array[Double], xi: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.interp1", "link" : "scilube\/Mathematics.html#interp1(x:Array[Double],y:Array[Double],xi:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "gcd", "tail" : "(a: Int, b: Int): Int", "member" : "scilube.Mathematics.gcd", "link" : "scilube\/Mathematics.html#gcd(a:Int,b:Int):Int", "kind" : "def"}, {"label" : "fzero", "tail" : "(fn: (Double) => Double, min: Double, max: Double): Double", "member" : "scilube.Mathematics.fzero", "link" : "scilube\/Mathematics.html#fzero(fn:Double=>Double,min:Double,max:Double):Double", "kind" : "def"}, {"label" : "fzero", "tail" : "(fn: (Double) => Double, start: Double): Double", "member" : "scilube.Mathematics.fzero", "link" : "scilube\/Mathematics.html#fzero(fn:Double=>Double,start:Double):Double", "kind" : "def"}, {"label" : "fix", "tail" : "(x: Double): Double", "member" : "scilube.Mathematics.fix", "link" : "scilube\/Mathematics.html#fix(x:Double):Double", "kind" : "def"}, {"label" : "fibonacciStream", "tail" : "(x: Int): Stream[BigInt]", "member" : "scilube.Mathematics.fibonacciStream", "link" : "scilube\/Mathematics.html#fibonacciStream(x:Int):Stream[BigInt]", "kind" : "def"}, {"label" : "fibonacci", "tail" : "(x: Int): BigInt", "member" : "scilube.Mathematics.fibonacci", "link" : "scilube\/Mathematics.html#fibonacci(x:Int):BigInt", "kind" : "def"}, {"label" : "fft", "tail" : "(data: Array[Double]): Array[Complex[Double]]", "member" : "scilube.Mathematics.fft", "link" : "scilube\/Mathematics.html#fft(data:Array[Double]):Array[spire.math.Complex[Double]]", "kind" : "def"}, {"label" : "dot", "tail" : "(a: Array[Double], b: Array[Double]): Double", "member" : "scilube.Mathematics.dot", "link" : "scilube\/Mathematics.html#dot(a:Array[Double],b:Array[Double]):Double", "kind" : "def"}, {"label" : "divide", "tail" : "(a: Array[Double], b: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.divide", "link" : "scilube\/Mathematics.html#divide(a:Array[Double],b:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "diff", "tail" : "(x: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.diff", "link" : "scilube\/Mathematics.html#diff(x:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "cumsum", "tail" : "(data: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.cumsum", "link" : "scilube\/Mathematics.html#cumsum(data:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "corrcoef", "tail" : "(x: Array[Double], y: Array[Double]): Double", "member" : "scilube.Mathematics.corrcoef", "link" : "scilube\/Mathematics.html#corrcoef(x:Array[Double],y:Array[Double]):Double", "kind" : "def"}, {"label" : "corr", "tail" : "(x: Array[Double], y: Array[Double]): Double", "member" : "scilube.Mathematics.corr", "link" : "scilube\/Mathematics.html#corr(x:Array[Double],y:Array[Double]):Double", "kind" : "def"}, {"label" : "add", "tail" : "(a: Array[Double], b: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.add", "link" : "scilube\/Mathematics.html#add(a:Array[Double],b:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/Mathematics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/Mathematics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/Mathematics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/Mathematics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/Mathematics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/Mathematics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/Mathematics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Mathematics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Mathematics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Mathematics.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/Mathematics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/Mathematics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/Mathematics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/Mathematics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/Mathematics.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/Mathematics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/Mathematics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/Mathematics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/Mathematics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Math functions."}, {"name" : "scilube.Matlib", "shortDescription" : "", "object" : "scilube\/Matlib$.html", "members_object" : [{"label" : "sort", "tail" : "(x: Array[A])(arg0: Ordering[A]): Seq[Int]", "member" : "scilube.Matlib.sort", "link" : "scilube\/Matlib$.html#sort[A](x:Array[A])(implicitevidence$2:scala.math.Ordering[A]):Seq[Int]", "kind" : "def"}, {"label" : "sort", "tail" : "(x: Array[A], lt: (A, A) => Boolean): Seq[Int]", "member" : "scilube.Matlib.sort", "link" : "scilube\/Matlib$.html#sort[A](x:Array[A],lt:(A,A)=>Boolean):Seq[Int]", "kind" : "def"}, {"label" : "find", "tail" : "(data: Array[A], predicate: (A) => Boolean): Seq[Int]", "member" : "scilube.Matlib.find", "link" : "scilube\/Matlib$.html#find[A](data:Array[A],predicate:A=>Boolean):Seq[Int]", "kind" : "def"}, {"label" : "subset", "tail" : "(data: Array[A], idx: Seq[Int])(arg0: ClassTag[A]): Array[A]", "member" : "scilube.Matlib.subset", "link" : "scilube\/Matlib$.html#subset[A](data:Array[A],idx:Seq[Int])(implicitevidence$1:scala.reflect.ClassTag[A]):Array[A]", "kind" : "def"}, {"label" : "tocdf", "tail" : "(data: Array[Double]): (Array[Double], Array[Double])", "member" : "scilube.Matlib.tocdf", "link" : "scilube\/Matlib$.html#tocdf(data:Array[Double]):(Array[Double],Array[Double])", "kind" : "def"}, {"label" : "trapz", "tail" : "(x: Array[Double], y: Array[Double]): Double", "member" : "scilube.Matlib.trapz", "link" : "scilube\/Matlib$.html#trapz(x:Array[Double],y:Array[Double]):Double", "kind" : "def"}, {"label" : "relativepdf", "tail" : "(y: Array[Double], y0: Array[Double], r: Array[Double]): Array[Double]", "member" : "scilube.Matlib.relativepdf", "link" : "scilube\/Matlib$.html#relativepdf(y:Array[Double],y0:Array[Double],r:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "relativecdf", "tail" : "(y: Array[Double], y0: Array[Double], r: Array[Double]): Array[Double]", "member" : "scilube.Matlib.relativecdf", "link" : "scilube\/Matlib$.html#relativecdf(y:Array[Double],y0:Array[Double],r:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "cot", "tail" : "(radians: Double): Double", "member" : "scilube.Trigonometry.cot", "link" : "scilube\/Matlib$.html#cot(radians:Double):Double", "kind" : "def"}, {"label" : "sec", "tail" : "(radians: Double): Double", "member" : "scilube.Trigonometry.sec", "link" : "scilube\/Matlib$.html#sec(radians:Double):Double", "kind" : "def"}, {"label" : "csc", "tail" : "(radians: Double): Double", "member" : "scilube.Trigonometry.csc", "link" : "scilube\/Matlib$.html#csc(radians:Double):Double", "kind" : "def"}, {"label" : "normalizeAngle", "tail" : "(radians: Double): Double", "member" : "scilube.Trigonometry.normalizeAngle", "link" : "scilube\/Matlib$.html#normalizeAngle(radians:Double):Double", "kind" : "def"}, {"label" : "HALF_PI", "tail" : ": Double", "member" : "scilube.Trigonometry.HALF_PI", "link" : "scilube\/Matlib$.html#HALF_PI:Double", "kind" : "val"}, {"label" : "TAU", "tail" : ": Double", "member" : "scilube.Trigonometry.TAU", "link" : "scilube\/Matlib$.html#TAU:Double", "kind" : "val"}, {"label" : "variance", "tail" : "(data: Array[Double]): Double", "member" : "scilube.Statistics.variance", "link" : "scilube\/Matlib$.html#variance(data:Array[Double]):Double", "kind" : "def"}, {"label" : "std", "tail" : "(data: Array[Double]): Double", "member" : "scilube.Statistics.std", "link" : "scilube\/Matlib$.html#std(data:Array[Double]):Double", "kind" : "def"}, {"label" : "median", "tail" : "(data: Array[Double]): Double", "member" : "scilube.Statistics.median", "link" : "scilube\/Matlib$.html#median(data:Array[Double]):Double", "kind" : "def"}, {"label" : "mean", "tail" : "(data: Array[Double]): Double", "member" : "scilube.Statistics.mean", "link" : "scilube\/Matlib$.html#mean(data:Array[Double]):Double", "kind" : "def"}, {"label" : "mad", "tail" : "(data: Array[Double]): Array[Double]", "member" : "scilube.Statistics.mad", "link" : "scilube\/Matlib$.html#mad(data:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "Schrödinger", "tail" : "(a: A, b: B): Either[A, B]", "member" : "scilube.Probabilities.Schrödinger", "link" : "scilube\/Matlib$.html#Schrödinger[A,B](a:A,b:B):Either[A,B]", "kind" : "def"}, {"label" : "quantile", "tail" : "(data: Array[Double], p: Array[Double], method: Int): Array[Double]", "member" : "scilube.Probabilities.quantile", "link" : "scilube\/Matlib$.html#quantile(data:Array[Double],p:Array[Double],method:Int):Array[Double]", "kind" : "def"}, {"label" : "quantile", "tail" : "(data: Array[Double], p: Array[Double]): Array[Double]", "member" : "scilube.Probabilities.quantile", "link" : "scilube\/Matlib$.html#quantile(data:Array[Double],p:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "quantile", "tail" : "(data: Array[Double], p: Double, method: Int): Double", "member" : "scilube.Probabilities.quantile", "link" : "scilube\/Matlib$.html#quantile(data:Array[Double],p:Double,method:Int):Double", "kind" : "def"}, {"label" : "quantile", "tail" : "(data: Array[Double], p: Double): Double", "member" : "scilube.Probabilities.quantile", "link" : "scilube\/Matlib$.html#quantile(data:Array[Double],p:Double):Double", "kind" : "def"}, {"label" : "histc", "tail" : "(data: Array[Double], edges: Array[Double]): Array[Double]", "member" : "scilube.Probabilities.histc", "link" : "scilube\/Matlib$.html#histc(data:Array[Double],edges:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "hist", "tail" : "(data: Array[Double], centers: Array[Double], inclusive: Boolean): Array[Double]", "member" : "scilube.Probabilities.hist", "link" : "scilube\/Matlib$.html#hist(data:Array[Double],centers:Array[Double],inclusive:Boolean):Array[Double]", "kind" : "def"}, {"label" : "factorial", "tail" : "(n: BigInt, result: BigInt): BigInt", "member" : "scilube.Probabilities.factorial", "link" : "scilube\/Matlib$.html#factorial(n:scala.math.BigInt,result:scala.math.BigInt):scala.math.BigInt", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: BigInt, c: BigInt): BigInt", "member" : "scilube.Probabilities.combinations", "link" : "scilube\/Matlib$.html#combinations(n:scala.math.BigInt,c:scala.math.BigInt):scala.math.BigInt", "kind" : "def"}, {"label" : "unique", "tail" : "(a: Array[Double], occurrence: String): (Array[Double], Array[Int], Array[Int])", "member" : "scilube.Mathematics.unique", "link" : "scilube\/Matlib$.html#unique(a:Array[Double],occurrence:String):(Array[Double],Array[Int],Array[Int])", "kind" : "def"}, {"label" : "sum", "tail" : "(x: Array[Double]): Double", "member" : "scilube.Mathematics.sum", "link" : "scilube\/Matlib$.html#sum(x:Array[Double]):Double", "kind" : "def"}, {"label" : "subtract", "tail" : "(a: Array[Double], b: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.subtract", "link" : "scilube\/Matlib$.html#subtract(a:Array[Double],b:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "sign", "tail" : "(x: Double): Int", "member" : "scilube.Mathematics.sign", "link" : "scilube\/Matlib$.html#sign(x:Double):Int", "kind" : "def"}, {"label" : "rem", "tail" : "(x: Double, y: Double): Double", "member" : "scilube.Mathematics.rem", "link" : "scilube\/Matlib$.html#rem(x:Double,y:Double):Double", "kind" : "def"}, {"label" : "prod", "tail" : "(data: Array[Double]): Double", "member" : "scilube.Mathematics.prod", "link" : "scilube\/Matlib$.html#prod(data:Array[Double]):Double", "kind" : "def"}, {"label" : "norm", "tail" : "(x: Array[Double]): Double", "member" : "scilube.Mathematics.norm", "link" : "scilube\/Matlib$.html#norm(x:Array[Double]):Double", "kind" : "def"}, {"label" : "near", "tail" : "(data: Array[Double], key: Double, inclusive: Boolean): Int", "member" : "scilube.Mathematics.near", "link" : "scilube\/Matlib$.html#near(data:Array[Double],key:Double,inclusive:Boolean):Int", "kind" : "def"}, {"label" : "multiply", "tail" : "(a: Array[Double], b: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.multiply", "link" : "scilube\/Matlib$.html#multiply(a:Array[Double],b:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "mod", "tail" : "(a: Double, b: Double): Double", "member" : "scilube.Mathematics.mod", "link" : "scilube\/Matlib$.html#mod(a:Double,b:Double):Double", "kind" : "def"}, {"label" : "logspace", "tail" : "(d1: Double, d2: Double, n: Int): Array[Double]", "member" : "scilube.Mathematics.logspace", "link" : "scilube\/Matlib$.html#logspace(d1:Double,d2:Double,n:Int):Array[Double]", "kind" : "def"}, {"label" : "linspace", "tail" : "(d1: Double, d2: Double, n: Int): Array[Double]", "member" : "scilube.Mathematics.linspace", "link" : "scilube\/Matlib$.html#linspace(d1:Double,d2:Double,n:Int):Array[Double]", "kind" : "def"}, {"label" : "isprime", "tail" : "(n: A)(arg0: Numeric[A]): Boolean", "member" : "scilube.Mathematics.isprime", "link" : "scilube\/Matlib$.html#isprime[A](n:A)(implicitevidence$1:Numeric[A]):Boolean", "kind" : "def"}, {"label" : "extrap1", "tail" : "(x: Array[Double], y: Array[Double], xi: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.extrap1", "link" : "scilube\/Matlib$.html#extrap1(x:Array[Double],y:Array[Double],xi:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "interp1", "tail" : "(x: Array[Double], y: Array[Double], xi: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.interp1", "link" : "scilube\/Matlib$.html#interp1(x:Array[Double],y:Array[Double],xi:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "gcd", "tail" : "(a: Int, b: Int): Int", "member" : "scilube.Mathematics.gcd", "link" : "scilube\/Matlib$.html#gcd(a:Int,b:Int):Int", "kind" : "def"}, {"label" : "fzero", "tail" : "(fn: (Double) => Double, min: Double, max: Double): Double", "member" : "scilube.Mathematics.fzero", "link" : "scilube\/Matlib$.html#fzero(fn:Double=>Double,min:Double,max:Double):Double", "kind" : "def"}, {"label" : "fzero", "tail" : "(fn: (Double) => Double, start: Double): Double", "member" : "scilube.Mathematics.fzero", "link" : "scilube\/Matlib$.html#fzero(fn:Double=>Double,start:Double):Double", "kind" : "def"}, {"label" : "fix", "tail" : "(x: Double): Double", "member" : "scilube.Mathematics.fix", "link" : "scilube\/Matlib$.html#fix(x:Double):Double", "kind" : "def"}, {"label" : "fibonacciStream", "tail" : "(x: Int): Stream[BigInt]", "member" : "scilube.Mathematics.fibonacciStream", "link" : "scilube\/Matlib$.html#fibonacciStream(x:Int):Stream[BigInt]", "kind" : "def"}, {"label" : "fibonacci", "tail" : "(x: Int): BigInt", "member" : "scilube.Mathematics.fibonacci", "link" : "scilube\/Matlib$.html#fibonacci(x:Int):BigInt", "kind" : "def"}, {"label" : "fft", "tail" : "(data: Array[Double]): Array[Complex[Double]]", "member" : "scilube.Mathematics.fft", "link" : "scilube\/Matlib$.html#fft(data:Array[Double]):Array[spire.math.Complex[Double]]", "kind" : "def"}, {"label" : "dot", "tail" : "(a: Array[Double], b: Array[Double]): Double", "member" : "scilube.Mathematics.dot", "link" : "scilube\/Matlib$.html#dot(a:Array[Double],b:Array[Double]):Double", "kind" : "def"}, {"label" : "divide", "tail" : "(a: Array[Double], b: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.divide", "link" : "scilube\/Matlib$.html#divide(a:Array[Double],b:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "diff", "tail" : "(x: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.diff", "link" : "scilube\/Matlib$.html#diff(x:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "cumsum", "tail" : "(data: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.cumsum", "link" : "scilube\/Matlib$.html#cumsum(data:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "corrcoef", "tail" : "(x: Array[Double], y: Array[Double]): Double", "member" : "scilube.Mathematics.corrcoef", "link" : "scilube\/Matlib$.html#corrcoef(x:Array[Double],y:Array[Double]):Double", "kind" : "def"}, {"label" : "corr", "tail" : "(x: Array[Double], y: Array[Double]): Double", "member" : "scilube.Mathematics.corr", "link" : "scilube\/Matlib$.html#corr(x:Array[Double],y:Array[Double]):Double", "kind" : "def"}, {"label" : "add", "tail" : "(a: Array[Double], b: Array[Double]): Array[Double]", "member" : "scilube.Mathematics.add", "link" : "scilube\/Matlib$.html#add(a:Array[Double],b:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/Matlib$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/Matlib$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/Matlib$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/Matlib$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/Matlib$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/Matlib$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/Matlib$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Matlib$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Matlib$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Matlib$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/Matlib$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/Matlib$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/Matlib$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/Matlib$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/Matlib$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/Matlib$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/Matlib$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/Matlib$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/Matlib$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "scilube.Probabilities", "trait" : "scilube\/Probabilities.html", "kind" : "trait", "members_trait" : [{"label" : "Schrödinger", "tail" : "(a: A, b: B): Either[A, B]", "member" : "scilube.Probabilities.Schrödinger", "link" : "scilube\/Probabilities.html#Schrödinger[A,B](a:A,b:B):Either[A,B]", "kind" : "def"}, {"label" : "quantile", "tail" : "(data: Array[Double], p: Array[Double], method: Int): Array[Double]", "member" : "scilube.Probabilities.quantile", "link" : "scilube\/Probabilities.html#quantile(data:Array[Double],p:Array[Double],method:Int):Array[Double]", "kind" : "def"}, {"label" : "quantile", "tail" : "(data: Array[Double], p: Array[Double]): Array[Double]", "member" : "scilube.Probabilities.quantile", "link" : "scilube\/Probabilities.html#quantile(data:Array[Double],p:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "quantile", "tail" : "(data: Array[Double], p: Double, method: Int): Double", "member" : "scilube.Probabilities.quantile", "link" : "scilube\/Probabilities.html#quantile(data:Array[Double],p:Double,method:Int):Double", "kind" : "def"}, {"label" : "quantile", "tail" : "(data: Array[Double], p: Double): Double", "member" : "scilube.Probabilities.quantile", "link" : "scilube\/Probabilities.html#quantile(data:Array[Double],p:Double):Double", "kind" : "def"}, {"label" : "histc", "tail" : "(data: Array[Double], edges: Array[Double]): Array[Double]", "member" : "scilube.Probabilities.histc", "link" : "scilube\/Probabilities.html#histc(data:Array[Double],edges:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "hist", "tail" : "(data: Array[Double], centers: Array[Double], inclusive: Boolean): Array[Double]", "member" : "scilube.Probabilities.hist", "link" : "scilube\/Probabilities.html#hist(data:Array[Double],centers:Array[Double],inclusive:Boolean):Array[Double]", "kind" : "def"}, {"label" : "factorial", "tail" : "(n: BigInt, result: BigInt): BigInt", "member" : "scilube.Probabilities.factorial", "link" : "scilube\/Probabilities.html#factorial(n:scala.math.BigInt,result:scala.math.BigInt):scala.math.BigInt", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: BigInt, c: BigInt): BigInt", "member" : "scilube.Probabilities.combinations", "link" : "scilube\/Probabilities.html#combinations(n:scala.math.BigInt,c:scala.math.BigInt):scala.math.BigInt", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/Probabilities.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/Probabilities.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/Probabilities.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/Probabilities.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/Probabilities.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/Probabilities.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/Probabilities.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Probabilities.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Probabilities.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Probabilities.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/Probabilities.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/Probabilities.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/Probabilities.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/Probabilities.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/Probabilities.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/Probabilities.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/Probabilities.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/Probabilities.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/Probabilities.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Probability functions"}, {"name" : "scilube.RichArray", "shortDescription" : "Adds function to support simple math with scalar values", "members_class" : [{"label" : "findIdx", "tail" : "(fn: (Double) => Boolean): Array[Int]", "member" : "scilube.RichArray.findIdx", "link" : "scilube\/package$$RichArray.html#findIdx(fn:Double=>Boolean):Array[Int]", "kind" : "def"}, {"label" : "subset", "tail" : "(idx: Seq[Int]): Array[Double]", "member" : "scilube.RichArray.subset", "link" : "scilube\/package$$RichArray.html#subset(idx:Seq[Int]):Array[Double]", "kind" : "def"}, {"label" : "\/", "tail" : "(s: Array[T])(arg0: Numeric[T]): Array[Double]", "member" : "scilube.RichArray.\/", "link" : "scilube\/package$$RichArray.html#\/[T](s:Array[T])(implicitevidence$4:Numeric[T]):Array[Double]", "kind" : "def"}, {"label" : "*", "tail" : "(s: Array[T])(arg0: Numeric[T]): Array[Double]", "member" : "scilube.RichArray.*", "link" : "scilube\/package$$RichArray.html#*[T](s:Array[T])(implicitevidence$3:Numeric[T]):Array[Double]", "kind" : "def"}, {"label" : "-", "tail" : "(s: Array[T])(arg0: Numeric[T]): Array[Double]", "member" : "scilube.RichArray.-", "link" : "scilube\/package$$RichArray.html#-[T](s:Array[T])(implicitevidence$2:Numeric[T]):Array[Double]", "kind" : "def"}, {"label" : "+", "tail" : "(s: Array[T])(arg0: Numeric[T]): Array[Double]", "member" : "scilube.RichArray.+", "link" : "scilube\/package$$RichArray.html#+[T](s:Array[T])(implicitevidence$1:Numeric[T]):Array[Double]", "kind" : "def"}, {"member" : "scilube.RichArray#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/package$$RichArray.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/package$$RichArray.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/package$$RichArray.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/package$$RichArray.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/package$$RichArray.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/package$$RichArray.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/package$$RichArray.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/package$$RichArray.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/package$$RichArray.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/package$$RichArray.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/package$$RichArray.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/package$$RichArray.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/package$$RichArray.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/package$$RichArray.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/package$$RichArray.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/package$$RichArray.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/package$$RichArray.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/package$$RichArray.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/package$$RichArray.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scilube\/package$$RichArray.html", "kind" : "class"}, {"name" : "scilube.ScalarArrayOps", "shortDescription" : "", "members_class" : [{"label" : "\/", "tail" : "(s: T)(arg0: Numeric[T]): Array[Double]", "member" : "scilube.ScalarArrayOps.\/", "link" : "scilube\/package$$ScalarArrayOps.html#\/[T](s:T)(implicitevidence$8:Numeric[T]):Array[Double]", "kind" : "def"}, {"label" : "*", "tail" : "(s: T)(arg0: Numeric[T]): Array[Double]", "member" : "scilube.ScalarArrayOps.*", "link" : "scilube\/package$$ScalarArrayOps.html#*[T](s:T)(implicitevidence$7:Numeric[T]):Array[Double]", "kind" : "def"}, {"label" : "-", "tail" : "(s: T)(arg0: Numeric[T]): Array[Double]", "member" : "scilube.ScalarArrayOps.-", "link" : "scilube\/package$$ScalarArrayOps.html#-[T](s:T)(implicitevidence$6:Numeric[T]):Array[Double]", "kind" : "def"}, {"label" : "+", "tail" : "(s: T)(arg0: Numeric[T]): Array[Double]", "member" : "scilube.ScalarArrayOps.+", "link" : "scilube\/package$$ScalarArrayOps.html#+[T](s:T)(implicitevidence$5:Numeric[T]):Array[Double]", "kind" : "def"}, {"member" : "scilube.ScalarArrayOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/package$$ScalarArrayOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/package$$ScalarArrayOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/package$$ScalarArrayOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/package$$ScalarArrayOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/package$$ScalarArrayOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/package$$ScalarArrayOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/package$$ScalarArrayOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/package$$ScalarArrayOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/package$$ScalarArrayOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/package$$ScalarArrayOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/package$$ScalarArrayOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/package$$ScalarArrayOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/package$$ScalarArrayOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/package$$ScalarArrayOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/package$$ScalarArrayOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/package$$ScalarArrayOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/package$$ScalarArrayOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/package$$ScalarArrayOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/package$$ScalarArrayOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scilube\/package$$ScalarArrayOps.html", "kind" : "class"}, {"name" : "scilube.Statistics", "trait" : "scilube\/Statistics.html", "kind" : "trait", "members_trait" : [{"label" : "variance", "tail" : "(data: Array[Double]): Double", "member" : "scilube.Statistics.variance", "link" : "scilube\/Statistics.html#variance(data:Array[Double]):Double", "kind" : "def"}, {"label" : "std", "tail" : "(data: Array[Double]): Double", "member" : "scilube.Statistics.std", "link" : "scilube\/Statistics.html#std(data:Array[Double]):Double", "kind" : "def"}, {"label" : "median", "tail" : "(data: Array[Double]): Double", "member" : "scilube.Statistics.median", "link" : "scilube\/Statistics.html#median(data:Array[Double]):Double", "kind" : "def"}, {"label" : "mean", "tail" : "(data: Array[Double]): Double", "member" : "scilube.Statistics.mean", "link" : "scilube\/Statistics.html#mean(data:Array[Double]):Double", "kind" : "def"}, {"label" : "mad", "tail" : "(data: Array[Double]): Array[Double]", "member" : "scilube.Statistics.mad", "link" : "scilube\/Statistics.html#mad(data:Array[Double]):Array[Double]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/Statistics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/Statistics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/Statistics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/Statistics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/Statistics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/Statistics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/Statistics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Statistics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Statistics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Statistics.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/Statistics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/Statistics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/Statistics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/Statistics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/Statistics.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/Statistics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/Statistics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/Statistics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/Statistics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Statistics functions"}, {"name" : "scilube.Trigonometry", "trait" : "scilube\/Trigonometry.html", "kind" : "trait", "members_trait" : [{"label" : "cot", "tail" : "(radians: Double): Double", "member" : "scilube.Trigonometry.cot", "link" : "scilube\/Trigonometry.html#cot(radians:Double):Double", "kind" : "def"}, {"label" : "sec", "tail" : "(radians: Double): Double", "member" : "scilube.Trigonometry.sec", "link" : "scilube\/Trigonometry.html#sec(radians:Double):Double", "kind" : "def"}, {"label" : "csc", "tail" : "(radians: Double): Double", "member" : "scilube.Trigonometry.csc", "link" : "scilube\/Trigonometry.html#csc(radians:Double):Double", "kind" : "def"}, {"label" : "normalizeAngle", "tail" : "(radians: Double): Double", "member" : "scilube.Trigonometry.normalizeAngle", "link" : "scilube\/Trigonometry.html#normalizeAngle(radians:Double):Double", "kind" : "def"}, {"label" : "HALF_PI", "tail" : ": Double", "member" : "scilube.Trigonometry.HALF_PI", "link" : "scilube\/Trigonometry.html#HALF_PI:Double", "kind" : "val"}, {"label" : "TAU", "tail" : ": Double", "member" : "scilube.Trigonometry.TAU", "link" : "scilube\/Trigonometry.html#TAU:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scilube\/Trigonometry.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scilube\/Trigonometry.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scilube\/Trigonometry.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scilube\/Trigonometry.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scilube\/Trigonometry.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scilube\/Trigonometry.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scilube\/Trigonometry.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Trigonometry.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Trigonometry.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scilube\/Trigonometry.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scilube\/Trigonometry.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scilube\/Trigonometry.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scilube\/Trigonometry.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scilube\/Trigonometry.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "scilube\/Trigonometry.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scilube\/Trigonometry.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "scilube\/Trigonometry.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scilube\/Trigonometry.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scilube\/Trigonometry.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}]};